import asyncio
import logging
from aiogram import Dispatcher
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from zoneinfo import ZoneInfo

from config import bot
from app.user import user
from app.admin import admin

from app.database.models import async_main
from app.database.requests import schedulers, restore_notifications


dp = Dispatcher()
MOSCOW_TZ = ZoneInfo("Europe/Moscow")
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)


async def on_startup(dispatcher):
    logging.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è on_startup...")
    await async_main()
    await restore_notifications()
    await scheduler—Å()
    asyncio.create_task(schedulers())


async def main():
    logging.info("üîπ main() —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª")
    dp.include_routers(user, admin)
    dp.startup.register(on_startup)
    logging.info("üîπ dispatcher.start_polling –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è")
    await dp.start_polling(bot)
    logging.info("üîπ dispatcher.start_polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")


async def scheduler—Å():
    logging.info("üïí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    if not scheduler.running:
        scheduler.start()
        logging.info(f"üöÄ Scheduler —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª! running={scheduler.running}")
    else:
        logging.info("‚öôÔ∏è Scheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
